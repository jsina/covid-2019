{"version":3,"sources":["iran.png","App.js","hooks/useFetch.js","serviceWorker.js","index.js"],"names":["module","exports","App","country","useState","loading","setLoading","data","setData","error","setError","useEffect","a","covid","getAll","all","getCountry","specificCountry","callApi","useFetch","console","log","className","style","backgroundImage","require","src","alt","cases","recovered","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,4IC6E5BC,MAxEf,WAAgB,IAAD,ECFR,WAA8C,IAA5BC,EAA2B,uDAAjB,gBAAiB,EACpBC,oBAAS,GADW,mBAC3CC,EAD2C,KAClCC,EADkC,OAE1BF,qBAF0B,mBAE3CG,EAF2C,KAErCC,EAFqC,OAGxBJ,oBAAS,GAHe,mBAG3CK,EAH2C,KAGpCC,EAHoC,KAsBlD,OAlBAC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,6DACdN,GAAW,GACXI,GAAS,GAFK,kBAIIG,IAAMC,SAJV,cAIRC,EAJQ,gBAKgBF,IAAMG,WAAW,CAAEb,YALnC,OAKRc,EALQ,OAMZT,EAAQ,CACNO,MACAE,oBARU,kDAWZP,GAAS,GAXG,QAadJ,GAAW,GAbG,0DAAH,qDAebY,KACC,CAACf,IACG,CAACE,EAASE,EAAME,GDnBQU,CAAS,QAD3B,mBACNd,EADM,KACGE,EADH,KACSE,EADT,KAGb,OADAW,QAAQC,IAAIhB,EAASE,EAAME,GAEzB,yBACEa,UAAU,uFACVC,MAAO,CACLC,gBAAgB,OAAD,OAASC,EAAQ,IAAjB,OAGhBpB,IAAYE,EACX,kBAAC,cAAD,MAEA,yBAAKe,UAAU,8DACb,yBACEA,UAAU,SACVI,IAAI,kEACJC,IAAI,4BAEN,yBAAKL,UAAU,yBACb,yBAAKA,UAAU,uCAAf,2IAGA,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,gDAAf,oDAGA,yBAAKA,UAAU,gDAAf,6EAGA,yBAAKA,UAAU,gDAAf,2DAIF,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,wBACZf,EAAKU,gBAAgBW,OAExB,yBAAKN,UAAU,wBACZf,EAAKU,gBAAgBY,WAExB,yBAAKP,UAAU,wBACZf,EAAKU,gBAAgBa,SAG1B,uBAAGR,UAAU,sCACX,iLACA,6BACA,sNACA,6BACA,mMACA,6BACA,8GAGJ,yBAAKA,UAAU,wBACb,0BAAMA,UAAU,4FAAhB,yCAGA,0BAAMA,UAAU,4FAAhB,mCAGA,0BAAMA,UAAU,uFAAhB,yDEvDQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLW,QAAQX,MAAMA,EAAMuC,c","file":"static/js/main.243cebdb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iran.fdc03aff.png\";","import React from \"react\";\nimport { WaveLoading } from \"react-loadingg\";\n\nimport { useFetch } from \"./hooks/\";\n\nfunction App() {\n  const [loading, data, error] = useFetch(\"iran\");\n  console.log(loading, data, error);\n  return (\n    <div\n      className=\"flex justify-center items-center bg-local h-screen bg-no-repeat bg-center bg-contain\"\n      style={{\n        backgroundImage: `url(${require(\"./iran.png\")})`\n      }}\n    >\n      {loading && !data ? (\n        <WaveLoading />\n      ) : (\n        <div className=\"max-w-sm rounded overflow-hidden shadow-lg h-auto bg-white\">\n          <img\n            className=\"w-full\"\n            src=\"https://miro.medium.com/max/10568/1*CIQbq-xmRUVxp1kNrO6tsg.jpeg\"\n            alt=\"Sunset in the mountains\"\n          />\n          <div className=\"px-6 py-4 text-center\">\n            <div className=\"font-bold text-base mb-2 text-right\">\n              آمار لحظه‌ای ویرویس کرونا\n            </div>\n            <div className=\"flex mb-4 flex-row-reverse\">\n              <div className=\"w-1/3 h-12 font-bold text-base text-gray-600\">\n                مبتلایان\n              </div>\n              <div className=\"w-1/3 h-12 font-bold text-base text-gray-600\">\n                بهبود یافتگان\n              </div>\n              <div className=\"w-1/3 h-12 font-bold text-base text-gray-600\">\n                درگذشتگان\n              </div>\n            </div>\n            <div className=\"flex mb-4 flex-row-reverse\">\n              <div className=\"w-1/3 h-12 text-base\">\n                {data.specificCountry.cases}\n              </div>\n              <div className=\"w-1/3 h-12 text-base\">\n                {data.specificCountry.recovered}\n              </div>\n              <div className=\"w-1/3 h-12 text-base\">\n                {data.specificCountry.deaths}\n              </div>\n            </div>\n            <p className=\"text-gray-700 text-base text-right\">\n              <span>شستشوی دستها با آب و صابون🧼</span>\n              <br></br>\n              <span>پوشاندن دهان و بیتی به هنگام عطسه🤧</span>\n              <br></br>\n              <span>خودداری از تماس نزدیک با افراد⛔</span>\n              <br></br>\n              <span>پخت کامل غذا🍲</span>\n            </p>\n          </div>\n          <div className=\"px-6 py-4 text-right\">\n            <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">\n              امید 🌱\n            </span>\n            <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">\n              عشق 💚\n            </span>\n            <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700\">\n              بهداشت 🧴\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport covid from \"novelcovid\";\n\nexport function useFetch(country = \"United States\") {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState();\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const callApi = async () => {\n      setLoading(true);\n      setError(false);\n      try {\n        let all = await covid.getAll();\n        let specificCountry = await covid.getCountry({ country });\n        setData({\n          all,\n          specificCountry\n        });\n      } catch (error) {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    callApi();\n  }, [country]);\n  return [loading, data, error];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}